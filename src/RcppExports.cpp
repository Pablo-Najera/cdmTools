// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// uP
arma::mat uP(const arma::mat& mloc, const arma::mat& mpar);
RcppExport SEXP _cdmTools_uP(SEXP mlocSEXP, SEXP mparSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mloc(mlocSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mpar(mparSEXP);
    rcpp_result_gen = Rcpp::wrap(uP(mloc, mpar));
    return rcpp_result_gen;
END_RCPP
}
// ObsLogLik
double ObsLogLik(const arma::mat& mpar, const arma::mat& mX, arma::mat vlogPrior, arma::vec vgroup, arma::mat& mloc, arma::vec& weights);
RcppExport SEXP _cdmTools_ObsLogLik(SEXP mparSEXP, SEXP mXSEXP, SEXP vlogPriorSEXP, SEXP vgroupSEXP, SEXP mlocSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mpar(mparSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type vlogPrior(vlogPriorSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vgroup(vgroupSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mloc(mlocSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(ObsLogLik(mpar, mX, vlogPrior, vgroup, mloc, weights));
    return rcpp_result_gen;
END_RCPP
}
// LikNR
Rcpp::List LikNR(const arma::mat& mpar, const arma::mat& mX, arma::mat vlogPrior, arma::vec vgroup, arma::mat mloc, arma::vec& weights, int simplify);
RcppExport SEXP _cdmTools_LikNR(SEXP mparSEXP, SEXP mXSEXP, SEXP vlogPriorSEXP, SEXP vgroupSEXP, SEXP mlocSEXP, SEXP weightsSEXP, SEXP simplifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mpar(mparSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type vlogPrior(vlogPriorSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vgroup(vgroupSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mloc(mlocSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type simplify(simplifySEXP);
    rcpp_result_gen = Rcpp::wrap(LikNR(mpar, mX, vlogPrior, vgroup, mloc, weights, simplify));
    return rcpp_result_gen;
END_RCPP
}
// LikNR_LC
Rcpp::List LikNR_LC(const arma::mat& mP, const arma::mat& mX, arma::mat vlogPrior, arma::vec vgroup, arma::vec weights, int simplify);
RcppExport SEXP _cdmTools_LikNR_LC(SEXP mPSEXP, SEXP mXSEXP, SEXP vlogPriorSEXP, SEXP vgroupSEXP, SEXP weightsSEXP, SEXP simplifySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type mP(mPSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type vlogPrior(vlogPriorSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vgroup(vgroupSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< int >::type simplify(simplifySEXP);
    rcpp_result_gen = Rcpp::wrap(LikNR_LC(mP, mX, vlogPrior, vgroup, weights, simplify));
    return rcpp_result_gen;
END_RCPP
}
// Lik_DTM
Rcpp::List Lik_DTM(arma::mat& mP, arma::mat& mX, arma::vec vC, arma::vec vlogPrior);
RcppExport SEXP _cdmTools_Lik_DTM(SEXP mPSEXP, SEXP mXSEXP, SEXP vCSEXP, SEXP vlogPriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type mP(mPSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vC(vCSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vlogPrior(vlogPriorSEXP);
    rcpp_result_gen = Rcpp::wrap(Lik_DTM(mP, mX, vC, vlogPrior));
    return rcpp_result_gen;
END_RCPP
}
// Lik_DTM_MG
Rcpp::List Lik_DTM_MG(arma::mat& mP, arma::mat& mX, arma::vec vC, arma::mat vlogPrior, arma::vec vgroup);
RcppExport SEXP _cdmTools_Lik_DTM_MG(SEXP mPSEXP, SEXP mXSEXP, SEXP vCSEXP, SEXP vlogPriorSEXP, SEXP vgroupSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type mP(mPSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vC(vCSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type vlogPrior(vlogPriorSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vgroup(vgroupSEXP);
    rcpp_result_gen = Rcpp::wrap(Lik_DTM_MG(mP, mX, vC, vlogPrior, vgroup));
    return rcpp_result_gen;
END_RCPP
}
// combnCpp
arma::umat combnCpp(double n, double k);
RcppExport SEXP _cdmTools_combnCpp(SEXP nSEXP, SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(combnCpp(n, k));
    return rcpp_result_gen;
END_RCPP
}
// rowProd
arma::mat rowProd(arma::mat& m, arma::vec& v);
RcppExport SEXP _cdmTools_rowProd(SEXP mSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type m(mSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(rowProd(m, v));
    return rcpp_result_gen;
END_RCPP
}
// whichrow_AinB
arma::uvec whichrow_AinB(arma::umat A, arma::umat B);
RcppExport SEXP _cdmTools_whichrow_AinB(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::umat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(whichrow_AinB(A, B));
    return rcpp_result_gen;
END_RCPP
}
// whichcol_AinB
arma::urowvec whichcol_AinB(arma::umat A, arma::umat B);
RcppExport SEXP _cdmTools_whichcol_AinB(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::umat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(whichcol_AinB(A, B));
    return rcpp_result_gen;
END_RCPP
}
// unique_rows
arma::umat unique_rows(arma::umat A);
RcppExport SEXP _cdmTools_unique_rows(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(unique_rows(A));
    return rcpp_result_gen;
END_RCPP
}
// alpha2
arma::umat alpha2(const int K);
RcppExport SEXP _cdmTools_alpha2(SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(alpha2(K));
    return rcpp_result_gen;
END_RCPP
}
// alphap
arma::umat alphap(const arma::uvec maxlevel);
RcppExport SEXP _cdmTools_alphap(SEXP maxlevelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::uvec >::type maxlevel(maxlevelSEXP);
    rcpp_result_gen = Rcpp::wrap(alphap(maxlevel));
    return rcpp_result_gen;
END_RCPP
}
// ColNormalize
arma::mat ColNormalize(arma::mat& X);
RcppExport SEXP _cdmTools_ColNormalize(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(ColNormalize(X));
    return rcpp_result_gen;
END_RCPP
}
// RowNormalize
arma::mat RowNormalize(arma::mat& X);
RcppExport SEXP _cdmTools_RowNormalize(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(RowNormalize(X));
    return rcpp_result_gen;
END_RCPP
}
// Pr_2PL
double Pr_2PL(double theta, double a, double b);
RcppExport SEXP _cdmTools_Pr_2PL(SEXP thetaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< double >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(Pr_2PL(theta, a, b));
    return rcpp_result_gen;
END_RCPP
}
// Pr_2PL_vec
arma::mat Pr_2PL_vec(const arma::vec& theta, const arma::vec& a, const arma::vec& b, const double minvalue, const double maxvalue);
RcppExport SEXP _cdmTools_Pr_2PL_vec(SEXP thetaSEXP, SEXP aSEXP, SEXP bSEXP, SEXP minvalueSEXP, SEXP maxvalueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type b(bSEXP);
    Rcpp::traits::input_parameter< const double >::type minvalue(minvalueSEXP);
    Rcpp::traits::input_parameter< const double >::type maxvalue(maxvalueSEXP);
    rcpp_result_gen = Rcpp::wrap(Pr_2PL_vec(theta, a, b, minvalue, maxvalue));
    return rcpp_result_gen;
END_RCPP
}
// logLikPattern
arma::mat logLikPattern(arma::mat& AlphaPattern, arma::vec& theta, arma::vec& a, arma::vec& b);
RcppExport SEXP _cdmTools_logLikPattern(SEXP AlphaPatternSEXP, SEXP thetaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type AlphaPattern(AlphaPatternSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(logLikPattern(AlphaPattern, theta, a, b));
    return rcpp_result_gen;
END_RCPP
}
// PostTheta
arma::mat PostTheta(arma::mat& AlphaPattern, arma::vec& theta, arma::vec& f_theta, arma::vec& a, arma::vec& b);
RcppExport SEXP _cdmTools_PostTheta(SEXP AlphaPatternSEXP, SEXP thetaSEXP, SEXP f_thetaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type AlphaPattern(AlphaPatternSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type f_theta(f_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(PostTheta(AlphaPattern, theta, f_theta, a, b));
    return rcpp_result_gen;
END_RCPP
}
// expectedNR
Rcpp::List expectedNR(arma::mat AlphaPattern, arma::vec nc, arma::vec theta, arma::vec f_theta, arma::vec a, arma::vec b);
RcppExport SEXP _cdmTools_expectedNR(SEXP AlphaPatternSEXP, SEXP ncSEXP, SEXP thetaSEXP, SEXP f_thetaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type AlphaPattern(AlphaPatternSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type nc(ncSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type f_theta(f_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(expectedNR(AlphaPattern, nc, theta, f_theta, a, b));
    return rcpp_result_gen;
END_RCPP
}
// logP_AlphaPattern
arma::vec logP_AlphaPattern(arma::mat& AlphaPattern, arma::vec& theta, arma::vec& f_theta, arma::vec& a, arma::vec& b);
RcppExport SEXP _cdmTools_logP_AlphaPattern(SEXP AlphaPatternSEXP, SEXP thetaSEXP, SEXP f_thetaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type AlphaPattern(AlphaPatternSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type f_theta(f_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(logP_AlphaPattern(AlphaPattern, theta, f_theta, a, b));
    return rcpp_result_gen;
END_RCPP
}
// HoIRTlogLik
double HoIRTlogLik(arma::mat& AlphaPattern, arma::vec ns, arma::vec theta, arma::vec f_theta, arma::vec a, arma::vec b);
RcppExport SEXP _cdmTools_HoIRTlogLik(SEXP AlphaPatternSEXP, SEXP nsSEXP, SEXP thetaSEXP, SEXP f_thetaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat& >::type AlphaPattern(AlphaPatternSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type f_theta(f_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(HoIRTlogLik(AlphaPattern, ns, theta, f_theta, a, b));
    return rcpp_result_gen;
END_RCPP
}
// HoIRTlogLik3
double HoIRTlogLik3(arma::vec& ns, arma::mat& mX, arma::vec& theta, arma::vec& f_theta, arma::vec a, arma::vec b);
RcppExport SEXP _cdmTools_HoIRTlogLik3(SEXP nsSEXP, SEXP mXSEXP, SEXP thetaSEXP, SEXP f_thetaSEXP, SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type ns(nsSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type mX(mXSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec& >::type f_theta(f_thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(HoIRTlogLik3(ns, mX, theta, f_theta, a, b));
    return rcpp_result_gen;
END_RCPP
}
// incomplogL
double incomplogL(arma::vec a, arma::vec b, arma::mat& logL, arma::mat& AlphaPattern, arma::vec theta, arma::vec f_theta);
RcppExport SEXP _cdmTools_incomplogL(SEXP aSEXP, SEXP bSEXP, SEXP logLSEXP, SEXP AlphaPatternSEXP, SEXP thetaSEXP, SEXP f_thetaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type a(aSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type b(bSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type logL(logLSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type AlphaPattern(AlphaPatternSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type f_theta(f_thetaSEXP);
    rcpp_result_gen = Rcpp::wrap(incomplogL(a, b, logL, AlphaPattern, theta, f_theta));
    return rcpp_result_gen;
END_RCPP
}
// designM
arma::umat designM(const int Kj, const int rule, Rcpp::Nullable<Rcpp::IntegerMatrix> AlphaPattern);
RcppExport SEXP _cdmTools_designM(SEXP KjSEXP, SEXP ruleSEXP, SEXP AlphaPatternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type Kj(KjSEXP);
    Rcpp::traits::input_parameter< const int >::type rule(ruleSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type AlphaPattern(AlphaPatternSEXP);
    rcpp_result_gen = Rcpp::wrap(designM(Kj, rule, AlphaPattern));
    return rcpp_result_gen;
END_RCPP
}
// matchMatrix
arma::uvec matchMatrix(arma::umat A, arma::umat B);
RcppExport SEXP _cdmTools_matchMatrix(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::umat >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(matchMatrix(A, B));
    return rcpp_result_gen;
END_RCPP
}
// eta
arma::umat eta(arma::umat& Q, Rcpp::Nullable<Rcpp::IntegerMatrix> AlphaPattern);
RcppExport SEXP _cdmTools_eta(SEXP QSEXP, SEXP AlphaPatternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type AlphaPattern(AlphaPatternSEXP);
    rcpp_result_gen = Rcpp::wrap(eta(Q, AlphaPattern));
    return rcpp_result_gen;
END_RCPP
}
// item_latent_group
Rcpp::List item_latent_group(arma::umat& Q, Rcpp::Nullable<Rcpp::IntegerMatrix> AlphaPattern);
RcppExport SEXP _cdmTools_item_latent_group(SEXP QSEXP, SEXP AlphaPatternSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat& >::type Q(QSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::IntegerMatrix> >::type AlphaPattern(AlphaPatternSEXP);
    rcpp_result_gen = Rcpp::wrap(item_latent_group(Q, AlphaPattern));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_cdmTools_uP", (DL_FUNC) &_cdmTools_uP, 2},
    {"_cdmTools_ObsLogLik", (DL_FUNC) &_cdmTools_ObsLogLik, 6},
    {"_cdmTools_LikNR", (DL_FUNC) &_cdmTools_LikNR, 7},
    {"_cdmTools_LikNR_LC", (DL_FUNC) &_cdmTools_LikNR_LC, 6},
    {"_cdmTools_Lik_DTM", (DL_FUNC) &_cdmTools_Lik_DTM, 4},
    {"_cdmTools_Lik_DTM_MG", (DL_FUNC) &_cdmTools_Lik_DTM_MG, 5},
    {"_cdmTools_combnCpp", (DL_FUNC) &_cdmTools_combnCpp, 2},
    {"_cdmTools_rowProd", (DL_FUNC) &_cdmTools_rowProd, 2},
    {"_cdmTools_whichrow_AinB", (DL_FUNC) &_cdmTools_whichrow_AinB, 2},
    {"_cdmTools_whichcol_AinB", (DL_FUNC) &_cdmTools_whichcol_AinB, 2},
    {"_cdmTools_unique_rows", (DL_FUNC) &_cdmTools_unique_rows, 1},
    {"_cdmTools_alpha2", (DL_FUNC) &_cdmTools_alpha2, 1},
    {"_cdmTools_alphap", (DL_FUNC) &_cdmTools_alphap, 1},
    {"_cdmTools_ColNormalize", (DL_FUNC) &_cdmTools_ColNormalize, 1},
    {"_cdmTools_RowNormalize", (DL_FUNC) &_cdmTools_RowNormalize, 1},
    {"_cdmTools_Pr_2PL", (DL_FUNC) &_cdmTools_Pr_2PL, 3},
    {"_cdmTools_Pr_2PL_vec", (DL_FUNC) &_cdmTools_Pr_2PL_vec, 5},
    {"_cdmTools_logLikPattern", (DL_FUNC) &_cdmTools_logLikPattern, 4},
    {"_cdmTools_PostTheta", (DL_FUNC) &_cdmTools_PostTheta, 5},
    {"_cdmTools_expectedNR", (DL_FUNC) &_cdmTools_expectedNR, 6},
    {"_cdmTools_logP_AlphaPattern", (DL_FUNC) &_cdmTools_logP_AlphaPattern, 5},
    {"_cdmTools_HoIRTlogLik", (DL_FUNC) &_cdmTools_HoIRTlogLik, 6},
    {"_cdmTools_HoIRTlogLik3", (DL_FUNC) &_cdmTools_HoIRTlogLik3, 6},
    {"_cdmTools_incomplogL", (DL_FUNC) &_cdmTools_incomplogL, 6},
    {"_cdmTools_designM", (DL_FUNC) &_cdmTools_designM, 3},
    {"_cdmTools_matchMatrix", (DL_FUNC) &_cdmTools_matchMatrix, 2},
    {"_cdmTools_eta", (DL_FUNC) &_cdmTools_eta, 2},
    {"_cdmTools_item_latent_group", (DL_FUNC) &_cdmTools_item_latent_group, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_cdmTools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
